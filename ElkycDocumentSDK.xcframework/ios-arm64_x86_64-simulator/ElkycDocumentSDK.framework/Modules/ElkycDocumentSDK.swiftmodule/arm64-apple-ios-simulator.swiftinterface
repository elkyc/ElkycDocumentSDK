// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ElkycDocumentSDK
import DocumentReader
import ElkycCoreSDK
@_exported import ElkycDocumentSDK
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
@_hasMissingDesignatedInitializers public class DocumentReader {
  public static func loadDatabase(databaseID: Swift.String = "Full", progressHandler: ((Foundation.Progress) -> Swift.Void)?, completion: @escaping ((Swift.Bool, Swift.Error?) -> Swift.Void))
  @objc deinit
}
public class CreditCardScan : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(documentMask: ElkycDocumentSDK.DocumentMask = .creditCard, shouldParseImage: Swift.Bool = false)
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.CreditCard, Swift.Error>) -> Swift.Void))
  public func startStep(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.CreditCard, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.CreditCard
  @objc deinit
}
public class BarcodeScan : ElkycCoreSDK.ElkycStep {
  public struct Response {
    public let image: UIKit.UIImage?
    public let fields: [Swift.Int : Swift.String]
  }
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(documentMask: ElkycDocumentSDK.DocumentMask = .empty, shouldParseImage: Swift.Bool = false)
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.BarcodeScan.Response, Swift.Error>) -> Swift.Void))
  public func startStep(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.BarcodeScan.Response, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.BarcodeScan.Response
  @objc deinit
}
public class InnScanWithConfrim : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(innImage: UIKit.UIImage? = nil, confirmConfig: ElkycCoreSDK.DocumentConfirm.Config = DocumentConfirm.Config())
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.InnScanWithConfrim.StepResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.InnScanWithConfrim.StepResult
  @objc deinit
}
extension ElkycDocumentSDK.InnScanWithConfrim {
  public struct StepResult {
    public let innScanResponse: ElkycDocumentSDK.InnDocumentScanResponse
    public let confirmResult: ElkycCoreSDK.DocumentConfirm.StepResult
  }
}
public struct DocumentResult : Swift.Encodable {
  public enum DocumentStepType : Swift.String, Swift.Encodable {
    case document
    case documentRfid
    case barCode
    case creditCard
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let elapsedTime: Swift.Int
  public let elapsedTimeRFID: Swift.Int
  public let overallResult: Swift.Int
  public let morePagesAvailable: Swift.Int
  public let types: [ElkycDocumentSDK.DocType]
  public let graphics: [ElkycDocumentSDK.DocumentGraphic]
  public let texts: [ElkycDocumentSDK.DocumentText]
  public let stepType: ElkycDocumentSDK.DocumentResult.DocumentStepType
  public let hasRFID: Swift.Bool
  public func mainDocumentImage() -> UIKit.UIImage?
  public func mainDocumentImageString() -> Swift.String
  public func portrait() -> UIKit.UIImage?
  public func encode(to encoder: Swift.Encoder) throws
}
public enum BaseSMProcedure {
  case aa
  case bac
  case ca
  case cardInfo
  case pace
  case ri
  case ta
  case undefined
  public static func == (a: ElkycDocumentSDK.BaseSMProcedure, b: ElkycDocumentSDK.BaseSMProcedure) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class RfidDocumentScan : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  final public let opticalDocResult: ElkycDocumentSDK.DocumentResult
  public init(opticalDocResult: ElkycDocumentSDK.DocumentResult, attemptCount: Swift.Int = 3, config: ElkycDocumentSDK.RfidDocumentScan.Config = Config(), baseSMProcedure: ElkycDocumentSDK.BaseSMProcedure = .bac)
  public static func isAvailable() -> Swift.Bool
  public func setCountriesICAOCode(_ codes: [Swift.String]) -> ElkycDocumentSDK.RfidDocumentScan
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public func startStep(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.DocumentResult
  @objc deinit
}
extension ElkycDocumentSDK.RfidDocumentScan {
  public struct Config {
    public var retryBtnBackgroundColor: UIKit.UIColor
    public var retryBtnTintColor: UIKit.UIColor
    public var skipBtnBackgroundColor: UIKit.UIColor
    public var skipBtnTintColor: UIKit.UIColor
    public init()
  }
}
public struct DocumentText : Swift.Encodable {
  public let status: Swift.Int
  public let fieldType: Swift.Int
  public let lcid: Swift.Int
  public let values: [ElkycDocumentSDK.DocumentTextValue]
  public func encode(to encoder: Swift.Encoder) throws
}
public class CaptureWithConfirm : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(documentMask: ElkycDocumentSDK.DocumentMask = .empty, documentType: ElkycDocumentSDK.CaptureDocumentType = .specific, scanDocument: Swift.Bool, docImage: UIKit.UIImage? = nil, confirmConfig: ElkycCoreSDK.DocumentConfirm.Config = DocumentConfirm.Config())
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.CaptureWithConfirm.StepResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.CaptureWithConfirm.StepResult
  @objc deinit
}
extension ElkycDocumentSDK.CaptureWithConfirm {
  public struct StepResult {
    public let captureResponse: ElkycDocumentSDK.CaptureResponse
    public let docResult: ElkycDocumentSDK.DocumentResult?
    public let confirmResult: ElkycCoreSDK.DocumentConfirm.StepResult
  }
}
public class DocumentScan : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(documentMask: ElkycDocumentSDK.DocumentMask = .empty, multipageProcessing: Swift.Bool = false, multipageAnimationFrontImage: UIKit.UIImage? = nil, multipageAnimationBackImage: UIKit.UIImage? = nil, multipageButtonBackgroundColor: UIKit.UIColor? = .elkycMain, showSkipNextPageButton: Swift.Bool = false, cameraFrameDefaultColor: UIKit.UIColor = .clear, cameraFrameActiveColor: UIKit.UIColor = .elkycMain, cameraFrameBorderWidth: CoreGraphics.CGFloat = 3, cameraFrameCornerRadius: CoreGraphics.CGFloat = 10, resultStatusTextFont: UIKit.UIFont? = nil, resultStatusTextColor: UIKit.UIColor = .white, resultStatusBackgroundColor: UIKit.UIColor = .elkycMain, resultStatusPositionMultiplier: CoreGraphics.CGFloat = 0, doublePageSpread: Swift.Bool = false, filterDocumentIDList: [Swift.Int]? = nil, showTorchButton: Swift.Bool = true, torchButtonOnImage: UIKit.UIImage? = UIImage(named: "torch_on",
                                                      in: Bundle(for: DocumentScan.self),
                                                      compatibleWith: nil), torchButtonOffImage: UIKit.UIImage? = UIImage(named: "torch_off",
                                                       in: Bundle(for: DocumentScan.self),
                                                       compatibleWith: nil), activityIndicatorColor: UIKit.UIColor? = nil)
  public func setCountriesICAOCode(_ codes: [Swift.String]) -> ElkycDocumentSDK.DocumentScan
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public func startStep(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.DocumentResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocumentImageScan : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(image: UIKit.UIImage, validateResponse: Swift.Bool = true)
  public func setCountriesICAOCode(_ codes: [Swift.String]) -> ElkycDocumentSDK.DocumentImageScan
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public func startStep(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.DocumentResult
  @objc deinit
}
public enum CaptureDocumentType {
  case utility
  case specific
  public static func == (a: ElkycDocumentSDK.CaptureDocumentType, b: ElkycDocumentSDK.CaptureDocumentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CaptureResponse : Swift.Encodable {
  public let image: Swift.String?
  public let originalImage: UIKit.UIImage?
  public let documentType: ElkycDocumentSDK.CaptureDocumentType
  public init(image: UIKit.UIImage, documentType: ElkycDocumentSDK.CaptureDocumentType)
  public func encode(to encoder: Swift.Encoder) throws
}
public enum DocumentMask : Swift.Equatable {
  case empty
  case worldwide
  case worldwideBack
  case ukrainianWorld
  case ukrainianId
  case ukrainianPassport
  case ukrainianPassportSecond
  case ukrainianPassportThird
  case ukrainianPassportFourth
  case oldPassportFirst
  case taxNumberUKR
  case creditCard
  case custom(UIKit.UIImage)
  public static func == (a: ElkycDocumentSDK.DocumentMask, b: ElkycDocumentSDK.DocumentMask) -> Swift.Bool
}
public class SelfieWithConfirm : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(config: ElkycDocumentSDK.SelfieWithConfirm.Config = Config())
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.SelfieWithConfirm.StepResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.SelfieWithConfirm.StepResult
  @objc deinit
}
extension ElkycDocumentSDK.SelfieWithConfirm {
  public struct Config {
    public var documentConfirmConfig: ElkycCoreSDK.DocumentConfirm.Config
    public init()
  }
}
extension ElkycDocumentSDK.SelfieWithConfirm {
  public struct StepResult {
    public let image: UIKit.UIImage
    public let confirmResult: ElkycCoreSDK.DocumentConfirm.StepResult
  }
}
public struct DocumentGraphic : Swift.Encodable {
  public let fieldType: Swift.Int
  public let sourceType: Swift.Int
  public let pageIndex: Swift.Int
  public let image: Swift.String
  public let originalImage: UIKit.UIImage
  public func encode(to encoder: Swift.Encoder) throws
}
public struct InnDocumentScanResponse {
  public let image: Swift.String?
  public let originalImage: UIKit.UIImage?
  public let number: Swift.String?
}
public class InnConfirm : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init(config: ElkycDocumentSDK.InnConfirm.Config = Config(), scanResponse: ElkycDocumentSDK.InnDocumentScanResponse)
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.InnDocumentScanResponse, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.InnDocumentScanResponse
  @objc deinit
}
extension ElkycDocumentSDK.InnConfirm {
  public struct Config {
    public var title: Swift.String
    public var empty_title: Swift.String
    public var mainBtnBackgroundColor: UIKit.UIColor
    public var mainBtnTintColor: UIKit.UIColor
    public var mainBtnTitle: Swift.String
    public init()
  }
}
public struct DocType : Swift.Encodable {
  public let name: Swift.String?
  public let pageIndex: Swift.Int
  public let hasMRZ: Swift.Bool
  public let icao: Swift.String?
  public let type: Swift.Int
  public let year: Swift.String?
  public let format: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CreditCard {
}
public struct DocumentTextValue : Swift.Encodable {
  public let pageIndex: Swift.Int
  public let probability: Swift.Int
  public let value: Swift.String
  public let validity: Swift.Int
  public let sourceType: Swift.Int
  public let comparison: [Swift.Int : Swift.Int]
  public func encode(to encoder: Swift.Encoder) throws
}
public class UkrPassportScan : ElkycCoreSDK.ElkycStep {
  public var stepId: ElkycCoreSDK.ElkycStepId
  public init()
  public func start(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public func startStep(from viewController: UIKit.UIViewController, completion: @escaping ((Swift.Result<ElkycDocumentSDK.DocumentResult, Swift.Error>) -> Swift.Void))
  public typealias Output = ElkycDocumentSDK.DocumentResult
  @objc deinit
}
extension ElkycDocumentSDK.DocumentResult.DocumentStepType : Swift.Equatable {}
extension ElkycDocumentSDK.DocumentResult.DocumentStepType : Swift.Hashable {}
extension ElkycDocumentSDK.DocumentResult.DocumentStepType : Swift.RawRepresentable {}
extension ElkycDocumentSDK.BaseSMProcedure : Swift.Equatable {}
extension ElkycDocumentSDK.BaseSMProcedure : Swift.Hashable {}
extension ElkycDocumentSDK.CaptureDocumentType : Swift.Equatable {}
extension ElkycDocumentSDK.CaptureDocumentType : Swift.Hashable {}
